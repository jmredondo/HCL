######################################################
# Licensed Materials - Property of HCL Technologies
#  HCL Commerce
#  (C) Copyright HCL Technologies Limited 1996, 2020
######################################################
{{- if and .Values.xcApp.enabled (ne .Values.common.environmentType "share") }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.common.tenant }}{{ .Values.common.environmentName}}{{ .Values.common.environmentType }}{{.Values.xcApp.name}}
  namespace: {{ .Release.Namespace }}
  labels:
    app: HCL-Commerce
    chart: {{ .Chart.Name }}-{{ .Chart.Version}}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector: 
    matchLabels:
      {{- if .Values.backwardCompatibility.selector.app }}
      app: {{ .Values.backwardCompatibility.selector.app }}
      {{- end }}
      {{- if .Values.backwardCompatibility.selector.chart }}
      chart: {{ .Values.backwardCompatibility.selector.chart }}
      {{- else }}
      chart: {{ .Chart.Name }}
      {{- end }}
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
      component: {{ .Values.common.tenant }}{{.Values.common.environmentName}}{{ .Values.common.environmentType }}{{.Values.xcApp.name}}
      group: {{ .Values.common.tenant }}{{ .Values.common.environmentName}}{{ .Values.common.environmentType }}
      {{- range $key, $value := .Values.backwardCompatibility.selector.extraSelector }}
      {{ $key }}: {{ $value | quote }}
      {{- end }}
  replicas: {{ .Values.xcApp.replica }}
  template:
    metadata:
      annotations:
        productName: "HCL Commerce"
        productVersion: {{ .Values.common.productVersion | quote }}
        deployTime: {{ now }}
      labels:
        {{- if .Values.backwardCompatibility.selector.app }}
        app: {{ .Values.backwardCompatibility.selector.app }}
        {{- else }}
        app: HCL-Commerce
        {{- end }}
        {{- if .Values.backwardCompatibility.selector.chart }}
        chart: {{ .Values.backwardCompatibility.selector.chart }}
        {{- else }}
        chart: {{ .Chart.Name }}
        {{- end }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        component: {{ .Values.common.tenant }}{{.Values.common.environmentName}}{{ .Values.common.environmentType }}{{.Values.xcApp.name}}
        group: {{ .Values.common.tenant }}{{ .Values.common.environmentName}}{{ .Values.common.environmentType }}
        {{- range $key, $value := .Values.backwardCompatibility.selector.extraSelector }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
    spec:
      affinity:
        nodeAffinity:
           {{- if .Values.xcApp.nodeLabel }}
           requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: wc-node-select-flag
                  operator: In
                  values: 
                  - {{ .Values.xcApp.nodeLabel }}
           {{- else }}
           requiredDuringSchedulingIgnoredDuringExecution:
           {{- include "nodeAffinityRequiredDuringScheduling" . | indent 8 }}
           {{- end }}   
           preferredDuringSchedulingIgnoredDuringExecution:
           {{- include "nodeAffinityPreferredDuringScheduling" . | indent 8 }}
      {{- include "xcapp-podAntiAffinity" . | indent 6 }}     
      hostNetwork: false
      hostPID: false
      hostIPC: false
      serviceAccountName: {{ .Values.common.serviceAccountName | default "default" }}
      volumes:
        - name: logs-sharing
          emptyDir: {}
      {{- if .Values.common.bindingConfigMap }}
        - name: config-volume
          configMap:
            name: {{ .Values.common.bindingConfigMap }} 
      {{- end }}
      {{- if .Values.hclCache.configMap }}
        - name: hcl-cache-config
          configMap:
            name: {{ .Values.common.tenant }}{{ .Values.common.environmentName}}{{ .Values.common.environmentType }}-hcl-cache-config
      {{- end }}
      {{- if and .Values.fileBeat.enabled .Values.xcApp.fileBeatConfigMap }}
        - name: filebeat-config-xc-app
          configMap:
            name: {{ .Values.tsApp.fileBeatConfigMap }}
      {{- end }}
      {{- if .Values.common.imagePullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.common.imagePullSecrets }}
      {{- end }}
      containers:
      - name: xc-app
        image: "{{ .Values.common.imageRepo }}{{.Values.xcApp.image}}:{{ .Values.xcApp.tag }}"
        {{- if .Values.common.imagePullPolicy }}
        imagePullPolicy: {{ .Values.common.imagePullPolicy }}
        {{- end }}
        resources:
{{ toYaml .Values.xcApp.resources | indent 12 }}
        env:
        - name: "LICENSE"
          value: {{ .Values.license | quote }}
        {{- if .Values.common.commerceVersion }}
        {{- if (or (eq .Values.common.commerceVersion "9.0.0.1") (eq .Values.common.commerceVersion "9.0.0.0")) }}
          {{- if .Values.common.overridePreconfig }}
        - name: "OVERRIDE_PRECONFIG"
          value: {{ .Values.common.overridePreconfig | quote }}
          {{- end }}
        {{- end}}
        {{- else }}
        - name: "CONFIGURE_MODE"
          value: {{ .Values.common.configureMode | quote }}  
        {{- end }}
        - name: "ENVIRONMENT"
          value: {{ .Values.common.environmentName | quote }}
        - name: "TENANT"
          value: {{.Values.common.tenant | quote}}
        - name: "ENVTYPE"
          value: {{ .Values.common.environmentType | quote }}
        - name: "DOMAIN_NAME"
          value: "{{ .Release.Namespace }}.svc.cluster.local"
        - name: "VAULT_CA"
          value: {{ .Values.vaultCA.enabled | quote }}
        - name: "SPIUSER_NAME"
          value: {{ .Values.common.spiUserName | quote }}
        - name: "SPIUSER_PWD"
          value: {{ .Values.common.spiUserPwdAes | quote }}
        {{- if .Values.metrics.enabled }}
        - name: "EXPOSE_METRICS"
          value: "true"
        {{- end }}
        {{- if (or (eq .Values.common.configureMode "Vault") .Values.vaultCA.enabled) }}
        - name: "VAULT_URL"
          value: {{ .Values.common.vaultUrl | quote }}
        {{- if .Values.common.vaultTokenSecret }}
        - name: "VAULT_TOKEN"
          valueFrom:
            secretKeyRef:
              name: {{ .Values.common.vaultTokenSecret }}
              key: VAULT_TOKEN
        {{- end }}
        {{- end }}
{{- if get .Values.xcApp.envParameters .Values.common.environmentType }}
     {{- range $key, $value := get .Values.xcApp.envParameters .Values.common.environmentType }}
        - name: {{ $key | quote }}
          value: {{ $value | quote }}
     {{- end }}
{{- end }}
        ports:
        - containerPort: 9080
          name: port9080
        - containerPort: 9443
          name: port9443
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /
            port: 9443
            scheme: HTTPS
          initialDelaySeconds: 60
          timeoutSeconds: 100
        livenessProbe:
          httpGet:
            path: /
            port: 9443
            scheme: HTTPS
          initialDelaySeconds: 240
          timeoutSeconds: 100
        securityContext:
            allowPrivilegeEscalation: true
            readOnlyRootFilesystem: false
            runAsNonRoot: false
            runAsUser: 0
            privileged: false
            capabilities:
              drop:
              - all
              add:
              - CHOWN
              - DAC_OVERRIDE
              - FOWNER
              - FSETID
              - KILL
              - SETGID
              - SETUID
              - SETPCAP
              - NET_BIND_SERVICE
              - NET_RAW
              - SYS_CHROOT
              - MKNOD
              - AUDIT_WRITE
              - SETFCAP
        volumeMounts:
          - name: logs-sharing
            mountPath: /opt/WebSphere/Liberty/usr/servers/default/logs/container
      {{- if .Values.common.bindingConfigMap }}
          - name: config-volume
            mountPath: /SETUP/ext-config/config.properties
            subPath: config.properties
            readOnly: false     
      {{- end }}
      {{- if .Values.hclCache.configMap }}
          - name: hcl-cache-config
            mountPath: /SETUP/hcl-cache/cache_cfg-ext.yaml
            subPath: cache_cfg-ext.yaml
          - name: hcl-cache-config
            mountPath: /SETUP/hcl-cache/redis_cfg.yaml
            subPath: redis_cfg.yaml
      {{- end }}
{{- if .Values.fileBeat.enabled }}
      - name: filebeat
        image: "{{ .Values.common.imageRepo }}{{ .Values.fileBeat.image }}:{{ .Values.fileBeat.tag }}"
        {{- if .Values.common.imagePullPolicy }}
        imagePullPolicy: {{ .Values.common.imagePullPolicy }}
        {{- end }}
        resources:
{{ toYaml .Values.fileBeat.resources | indent 12 }}
        args: ["-indexName", "{{ .Values.common.tenant }}-{{ .Values.common.environmentName}}-{{ .Values.common.environmentType }}", "-targetELK", "{{ .Values.fileBeat.elkServer }}", "-componentType", "xc-app"]
        securityContext:
            allowPrivilegeEscalation: true
            readOnlyRootFilesystem: false
            runAsNonRoot: false
            runAsUser: 0
            privileged: false
            capabilities:
              drop:
              - all
              add:
              - CHOWN
              - DAC_OVERRIDE
              - FOWNER
              - FSETID
              - KILL
              - SETGID
              - SETUID
              - SETPCAP
              - NET_BIND_SERVICE
              - NET_RAW
              - SYS_CHROOT
              - MKNOD
              - AUDIT_WRITE
              - SETFCAP
        volumeMounts:
        - name: logs-sharing
          mountPath: /log
{{- if .Values.xcApp.fileBeatConfigMap }}
        - name: filebeat-config-xc-app
          mountPath: /etc/filebeat
{{- end }}
{{- end }}

{{- end }}